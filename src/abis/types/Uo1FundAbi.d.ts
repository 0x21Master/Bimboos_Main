/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface Uo1FundAbiInterface extends ethers.utils.Interface {
  functions: {
    "AM()": FunctionFragment;
    "accountNetValue(address)": FunctionFragment;
    "allowExit(bool)": FunctionFragment;
    "allowJoin(bool)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assets()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bind(string,string,address,address)": FunctionFragment;
    "calcManagementFee()": FunctionFragment;
    "calcPerformanceFee(address,uint256)": FunctionFragment;
    "calcRatioFee(uint8,uint256)": FunctionFragment;
    "checkAllowExit()": FunctionFragment;
    "checkAllowJoin()": FunctionFragment;
    "convertToCash(uint256)": FunctionFragment;
    "convertToShare(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "exitPool(uint256)": FunctionFragment;
    "exitPoolOfUnderlying(uint256)": FunctionFragment;
    "getCap()": FunctionFragment;
    "getFee(uint8)": FunctionFragment;
    "getGovernance()": FunctionFragment;
    "getRewards()": FunctionFragment;
    "globalNetValue()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "init(string,string,address,address)": FunctionFragment;
    "ioToken()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isStrategist(address)": FunctionFragment;
    "joinPool(uint256)": FunctionFragment;
    "lup()": FunctionFragment;
    "maintain(bool)": FunctionFragment;
    "name()": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setFee(uint8,uint256,uint256,uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setLup(uint256)": FunctionFragment;
    "setRewards(address)": FunctionFragment;
    "setStrategist(address,bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "takeOutstandingManagementFee()": FunctionFragment;
    "takeOutstandingPerformanceFee(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "AM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountNetValue",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "allowExit", values: [boolean]): string;
  encodeFunctionData(functionFragment: "allowJoin", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "assets", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bind",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcManagementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcPerformanceFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcRatioFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllowExit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllowJoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertToCash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPoolOfUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalNetValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "ioToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isStrategist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lup", values?: undefined): string;
  encodeFunctionData(functionFragment: "maintain", values: [boolean]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeOutstandingManagementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeOutstandingPerformanceFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "AM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountNetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowExit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcRatioFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllowExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllowJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitPoolOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalNetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ioToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maintain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeOutstandingManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeOutstandingPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CapChanged(address,uint256,uint256)": EventFragment;
    "FeeChanged(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PoolExited(address,uint256)": EventFragment;
    "PoolJoined(address,uint256)": EventFragment;
    "TakeFee(uint8,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Uo1FundAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Uo1FundAbiInterface;

  functions: {
    AM(overrides?: CallOverrides): Promise<[string]>;

    accountNetValue(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowExit(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowJoin(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assets(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bind(
      name: string,
      symbol: string,
      token: string,
      am: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcManagementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcPerformanceFee(
      target: string,
      newNet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcRatioFee(
      ft: BigNumberish,
      vaultAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkAllowExit(overrides?: CallOverrides): Promise<[boolean]>;

    checkAllowJoin(overrides?: CallOverrides): Promise<[boolean]>;

    convertToCash(
      vaultAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToShare(
      cashAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPoolOfUnderlying(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFee(
      ft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          ratio: BigNumber;
          denominator: BigNumber;
          lastTimestamp: BigNumber;
          minLine: BigNumber;
        }
      ]
    >;

    getGovernance(overrides?: CallOverrides): Promise<[string]>;

    getRewards(overrides?: CallOverrides): Promise<[string]>;

    globalNetValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      name: string,
      symbol: string,
      token: string,
      am: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ioToken(overrides?: CallOverrides): Promise<[string]>;

    isAdmin(_admin: string, overrides?: CallOverrides): Promise<[boolean]>;

    isStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lup(overrides?: CallOverrides): Promise<[BigNumber]>;

    maintain(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _admin: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCap(
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      ft: BigNumberish,
      ratio: BigNumberish,
      denominator: BigNumberish,
      minLine: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLup(
      _lup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    takeOutstandingManagementFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeOutstandingPerformanceFee(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AM(overrides?: CallOverrides): Promise<string>;

  accountNetValue(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowExit(
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowJoin(
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assets(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bind(
    name: string,
    symbol: string,
    token: string,
    am: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

  calcPerformanceFee(
    target: string,
    newNet: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcRatioFee(
    ft: BigNumberish,
    vaultAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkAllowExit(overrides?: CallOverrides): Promise<boolean>;

  checkAllowJoin(overrides?: CallOverrides): Promise<boolean>;

  convertToCash(
    vaultAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShare(
    cashAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPool(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPoolOfUnderlying(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCap(overrides?: CallOverrides): Promise<BigNumber>;

  getFee(
    ft: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      ratio: BigNumber;
      denominator: BigNumber;
      lastTimestamp: BigNumber;
      minLine: BigNumber;
    }
  >;

  getGovernance(overrides?: CallOverrides): Promise<string>;

  getRewards(overrides?: CallOverrides): Promise<string>;

  globalNetValue(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    name: string,
    symbol: string,
    token: string,
    am: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ioToken(overrides?: CallOverrides): Promise<string>;

  isAdmin(_admin: string, overrides?: CallOverrides): Promise<boolean>;

  isStrategist(
    _strategist: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinPool(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lup(overrides?: CallOverrides): Promise<BigNumber>;

  maintain(
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _admin: string,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCap(
    cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    ft: BigNumberish,
    ratio: BigNumberish,
    denominator: BigNumberish,
    minLine: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLup(
    _lup: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewards(
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  takeOutstandingManagementFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeOutstandingPerformanceFee(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AM(overrides?: CallOverrides): Promise<string>;

    accountNetValue(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowExit(_value: boolean, overrides?: CallOverrides): Promise<void>;

    allowJoin(_value: boolean, overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assets(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bind(
      name: string,
      symbol: string,
      token: string,
      am: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calcManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    calcPerformanceFee(
      target: string,
      newNet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcRatioFee(
      ft: BigNumberish,
      vaultAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAllowExit(overrides?: CallOverrides): Promise<boolean>;

    checkAllowJoin(overrides?: CallOverrides): Promise<boolean>;

    convertToCash(
      vaultAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShare(
      cashAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exitPool(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    exitPoolOfUnderlying(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCap(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      ft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        ratio: BigNumber;
        denominator: BigNumber;
        lastTimestamp: BigNumber;
        minLine: BigNumber;
      }
    >;

    getGovernance(overrides?: CallOverrides): Promise<string>;

    getRewards(overrides?: CallOverrides): Promise<string>;

    globalNetValue(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      name: string,
      symbol: string,
      token: string,
      am: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ioToken(overrides?: CallOverrides): Promise<string>;

    isAdmin(_admin: string, overrides?: CallOverrides): Promise<boolean>;

    isStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinPool(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lup(overrides?: CallOverrides): Promise<BigNumber>;

    maintain(_value: boolean, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    setAdmin(
      _admin: string,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(cap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFee(
      ft: BigNumberish,
      ratio: BigNumberish,
      denominator: BigNumberish,
      minLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLup(_lup: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    setStrategist(
      _strategist: string,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    takeOutstandingManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    takeOutstandingPerformanceFee(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    CapChanged(
      setter?: string | null,
      oldCap?: null,
      newCap?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setter: string; oldCap: BigNumber; newCap: BigNumber }
    >;

    FeeChanged(
      setter?: string | null,
      oldRatio?: null,
      oldDenominator?: null,
      newRatio?: null,
      newDenominator?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        setter: string;
        oldRatio: BigNumber;
        oldDenominator: BigNumber;
        newRatio: BigNumber;
        newDenominator: BigNumber;
      }
    >;

    PoolExited(
      investor?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { investor: string; amount: BigNumber }
    >;

    PoolJoined(
      investor?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { investor: string; amount: BigNumber }
    >;

    TakeFee(
      ft?: null,
      owner?: null,
      fee?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { ft: number; owner: string; fee: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    AM(overrides?: CallOverrides): Promise<BigNumber>;

    accountNetValue(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowExit(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowJoin(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assets(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bind(
      name: string,
      symbol: string,
      token: string,
      am: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    calcPerformanceFee(
      target: string,
      newNet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcRatioFee(
      ft: BigNumberish,
      vaultAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAllowExit(overrides?: CallOverrides): Promise<BigNumber>;

    checkAllowJoin(overrides?: CallOverrides): Promise<BigNumber>;

    convertToCash(
      vaultAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShare(
      cashAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPoolOfUnderlying(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCap(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(ft: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(overrides?: CallOverrides): Promise<BigNumber>;

    globalNetValue(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      name: string,
      symbol: string,
      token: string,
      am: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ioToken(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(_admin: string, overrides?: CallOverrides): Promise<BigNumber>;

    isStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lup(overrides?: CallOverrides): Promise<BigNumber>;

    maintain(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCap(
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      ft: BigNumberish,
      ratio: BigNumberish,
      denominator: BigNumberish,
      minLine: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLup(
      _lup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    takeOutstandingManagementFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeOutstandingPerformanceFee(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountNetValue(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowExit(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowJoin(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bind(
      name: string,
      symbol: string,
      token: string,
      am: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcManagementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcPerformanceFee(
      target: string,
      newNet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcRatioFee(
      ft: BigNumberish,
      vaultAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAllowExit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkAllowJoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToCash(
      vaultAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShare(
      cashAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPoolOfUnderlying(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      ft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalNetValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      name: string,
      symbol: string,
      token: string,
      am: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ioToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maintain(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCap(
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      ft: BigNumberish,
      ratio: BigNumberish,
      denominator: BigNumberish,
      minLine: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLup(
      _lup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeOutstandingManagementFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeOutstandingPerformanceFee(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
