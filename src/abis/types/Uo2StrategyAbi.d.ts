/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface Uo2StrategyAbiInterface extends ethers.utils.Interface {
  functions: {
    "assets()": FunctionFragment;
    "bind(address,address)": FunctionFragment;
    "checkPos(address,int24,int24)": FunctionFragment;
    "collect(uint256,uint128,uint128)": FunctionFragment;
    "decreaseLiquidity(uint256,uint128,uint256,uint256)": FunctionFragment;
    "estimateAmountIn(address,address,uint256)": FunctionFragment;
    "estimateAmountOut(address,address,uint256)": FunctionFragment;
    "exactInput(address,address,uint256,uint256)": FunctionFragment;
    "exactOutput(address,address,uint256,uint256)": FunctionFragment;
    "getGovernance()": FunctionFragment;
    "getRewards()": FunctionFragment;
    "getUnderlyings()": FunctionFragment;
    "history(bytes32)": FunctionFragment;
    "idleAssets()": FunctionFragment;
    "increaseLiquidity(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "ioToken()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isStrategist(address)": FunctionFragment;
    "liquidityAssets()": FunctionFragment;
    "mint(address,address,uint24,int24,int24,uint256,uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "positionOwners(uint256)": FunctionFragment;
    "removeUnderlyings(address[])": FunctionFragment;
    "safeApproveAll(address)": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setRewards(address)": FunctionFragment;
    "setStrategist(address,bool)": FunctionFragment;
    "setTokenLimit(address,address,int256)": FunctionFragment;
    "setUnderlyings(address[])": FunctionFragment;
    "settingSwapRoute(bytes)": FunctionFragment;
    "swapRoute(address,address)": FunctionFragment;
    "tokenLimit(address,address)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdraw(address,address,uint256,uint256)": FunctionFragment;
    "withdrawAll(address)": FunctionFragment;
    "withdrawOfUnderlying(address,uint256)": FunctionFragment;
    "worksPos()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "assets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bind",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPos",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateAmountIn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateAmountOut",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutput",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "history", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "idleAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "ioToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isStrategist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "positionOwners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUnderlyings",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeApproveAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenLimit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderlyings",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settingSwapRoute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRoute",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLimit",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdrawAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawOfUnderlying",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "worksPos", values?: undefined): string;

  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkPos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "history", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idleAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ioToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUnderlyings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeApproveAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnderlyings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settingSwapRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRoute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "worksPos", data: BytesLike): Result;

  events: {
    "Collect(address,uint256,uint256,uint256)": EventFragment;
    "DecreaseLiquidity(address,uint256,uint128)": EventFragment;
    "IncreaseLiquidity(address,uint256,uint128)": EventFragment;
    "Mint(address,uint256,uint128)": EventFragment;
    "Swap(address,address,address,uint256,uint256)": EventFragment;
    "TakeFee(uint8,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeFee"): EventFragment;
}

export class Uo2StrategyAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Uo2StrategyAbiInterface;

  functions: {
    assets(overrides?: CallOverrides): Promise<[BigNumber]>;

    bind(
      _vault: string,
      _ioToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkPos(
      pool: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        atWork: boolean;
        has: boolean;
        tokenId: BigNumber;
      }
    >;

    collect(
      tokenId: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateAmountIn(
      from: string,
      to: string,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    estimateAmountOut(
      from: string,
      to: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    exactInput(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOutMinimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactOutput(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      amountInMaximum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGovernance(overrides?: CallOverrides): Promise<[string]>;

    getRewards(overrides?: CallOverrides): Promise<[string]>;

    getUnderlyings(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    history(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    idleAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseLiquidity(
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ioToken(overrides?: CallOverrides): Promise<[string]>;

    isAdmin(_admin: string, overrides?: CallOverrides): Promise<[boolean]>;

    isStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      token0: string,
      token1: string,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positionOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeUnderlyings(
      ts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeApproveAll(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenLimit(
      strategist: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnderlyings(
      ts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settingSwapRoute(
      path: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapRoute(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenLimit(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      outputToken: string,
      to: string,
      amount: BigNumberish,
      scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawOfUnderlying(
      to: string,
      scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    worksPos(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds: BigNumber[] }>;
  };

  assets(overrides?: CallOverrides): Promise<BigNumber>;

  bind(
    _vault: string,
    _ioToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkPos(
    pool: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      atWork: boolean;
      has: boolean;
      tokenId: BigNumber;
    }
  >;

  collect(
    tokenId: BigNumberish,
    amount0Max: BigNumberish,
    amount1Max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    tokenId: BigNumberish,
    liquidity: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimateAmountIn(
    from: string,
    to: string,
    amountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateAmountOut(
    from: string,
    to: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exactInput(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    amountOutMinimum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactOutput(
    tokenIn: string,
    tokenOut: string,
    amountOut: BigNumberish,
    amountInMaximum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGovernance(overrides?: CallOverrides): Promise<string>;

  getRewards(overrides?: CallOverrides): Promise<string>;

  getUnderlyings(overrides?: CallOverrides): Promise<string[]>;

  history(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  idleAssets(overrides?: CallOverrides): Promise<BigNumber>;

  increaseLiquidity(
    tokenId: BigNumberish,
    amount0Desired: BigNumberish,
    amount1Desired: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ioToken(overrides?: CallOverrides): Promise<string>;

  isAdmin(_admin: string, overrides?: CallOverrides): Promise<boolean>;

  isStrategist(
    _strategist: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidityAssets(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    token0: string,
    token1: string,
    fee: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amount0Desired: BigNumberish,
    amount1Desired: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positionOwners(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeUnderlyings(
    ts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeApproveAll(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewards(
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenLimit(
    strategist: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnderlyings(
    ts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settingSwapRoute(
    path: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapRoute(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenLimit(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdraw(
    outputToken: string,
    to: string,
    amount: BigNumberish,
    scale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawOfUnderlying(
    to: string,
    scale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  worksPos(overrides?: CallOverrides): Promise<BigNumber[]>;

  callStatic: {
    assets(overrides?: CallOverrides): Promise<BigNumber>;

    bind(
      _vault: string,
      _ioToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkPos(
      pool: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        atWork: boolean;
        has: boolean;
        tokenId: BigNumber;
      }
    >;

    collect(
      tokenId: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    decreaseLiquidity(
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    estimateAmountIn(
      from: string,
      to: string,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateAmountOut(
      from: string,
      to: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInput(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOutMinimum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactOutput(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      amountInMaximum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernance(overrides?: CallOverrides): Promise<string>;

    getRewards(overrides?: CallOverrides): Promise<string>;

    getUnderlyings(overrides?: CallOverrides): Promise<string[]>;

    history(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    idleAssets(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLiquidity(
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    ioToken(overrides?: CallOverrides): Promise<string>;

    isAdmin(_admin: string, overrides?: CallOverrides): Promise<boolean>;

    isStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      token0: string,
      token1: string,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    positionOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeUnderlyings(ts: string[], overrides?: CallOverrides): Promise<void>;

    safeApproveAll(token: string, overrides?: CallOverrides): Promise<void>;

    setAdmin(
      _admin: string,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    setStrategist(
      _strategist: string,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenLimit(
      strategist: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnderlyings(ts: string[], overrides?: CallOverrides): Promise<void>;

    settingSwapRoute(path: BytesLike, overrides?: CallOverrides): Promise<void>;

    swapRoute(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenLimit(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdraw(
      outputToken: string,
      to: string,
      amount: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(to: string, overrides?: CallOverrides): Promise<void>;

    withdrawOfUnderlying(
      to: string,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    worksPos(overrides?: CallOverrides): Promise<BigNumber[]>;
  };

  filters: {
    Collect(
      sender?: null,
      tokenId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        tokenId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    DecreaseLiquidity(
      sender?: null,
      tokenId?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; tokenId: BigNumber; liquidity: BigNumber }
    >;

    IncreaseLiquidity(
      sender?: null,
      tokenId?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; tokenId: BigNumber; liquidity: BigNumber }
    >;

    Mint(
      sender?: null,
      tokenId?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; tokenId: BigNumber; liquidity: BigNumber }
    >;

    Swap(
      sender?: null,
      fromToken?: null,
      toToken?: null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sender: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
      }
    >;

    TakeFee(
      ft?: null,
      owner?: null,
      fee?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { ft: number; owner: string; fee: BigNumber }
    >;
  };

  estimateGas: {
    assets(overrides?: CallOverrides): Promise<BigNumber>;

    bind(
      _vault: string,
      _ioToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkPos(
      pool: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      tokenId: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseLiquidity(
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimateAmountIn(
      from: string,
      to: string,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateAmountOut(
      from: string,
      to: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInput(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOutMinimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactOutput(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      amountInMaximum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyings(overrides?: CallOverrides): Promise<BigNumber>;

    history(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    idleAssets(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLiquidity(
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ioToken(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(_admin: string, overrides?: CallOverrides): Promise<BigNumber>;

    isStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      token0: string,
      token1: string,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positionOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeUnderlyings(
      ts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeApproveAll(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenLimit(
      strategist: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnderlyings(
      ts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settingSwapRoute(
      path: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapRoute(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenLimit(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      outputToken: string,
      to: string,
      amount: BigNumberish,
      scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawOfUnderlying(
      to: string,
      scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    worksPos(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bind(
      _vault: string,
      _ioToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkPos(
      pool: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collect(
      tokenId: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimateAmountIn(
      from: string,
      to: string,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateAmountOut(
      from: string,
      to: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exactInput(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOutMinimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactOutput(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      amountInMaximum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    history(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idleAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseLiquidity(
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ioToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      token0: string,
      token1: string,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positionOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeUnderlyings(
      ts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeApproveAll(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenLimit(
      strategist: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnderlyings(
      ts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settingSwapRoute(
      path: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapRoute(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenLimit(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      outputToken: string,
      to: string,
      amount: BigNumberish,
      scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOfUnderlying(
      to: string,
      scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    worksPos(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
